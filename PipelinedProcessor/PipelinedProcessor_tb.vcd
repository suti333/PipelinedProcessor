$date
	Sun Oct 23 19:33:16 2022
$end
$version
	Icarus Verilog
$end
$timescale
	1ns
$end
$scope module PipelinedProcessor_tb $end
$var reg 1 ! clk $end
$var reg 1 " reset $end
$scope module uut $end
$var wire 1 # IDflush $end
$var wire 1 $ IFIDwriteEn $end
$var wire 1 % IFflush $end
$var wire 1 & PCSrc $end
$var wire 1 ! clk $end
$var wire 1 ' flush $end
$var wire 6 ( funct [5:0] $end
$var wire 1 ) jumpcontrol $end
$var wire 1 * jumpflush $end
$var wire 32 + op1 [31:0] $end
$var wire 1 , pcwriteEn $end
$var wire 1 " reset $end
$var wire 1 - stall $end
$var wire 1 . zero $end
$var wire 5 / writeReg [4:0] $end
$var wire 32 0 writeData [31:0] $end
$var wire 1 1 stall2 $end
$var wire 1 2 stall1 $end
$var wire 32 3 signextendout [31:0] $end
$var wire 5 4 rt [4:0] $end
$var wire 5 5 rs [4:0] $end
$var wire 32 6 readData2 [31:0] $end
$var wire 32 7 readData1 [31:0] $end
$var wire 32 8 readData [31:0] $end
$var wire 5 9 rd [4:0] $end
$var wire 32 : pc_inp [31:0] $end
$var wire 32 ; pcNext [31:0] $end
$var wire 32 < pc [31:0] $end
$var wire 6 = opcode [5:0] $end
$var wire 32 > op2 [31:0] $end
$var wire 32 ? instr [31:0] $end
$var wire 16 @ addr16 [15:0] $end
$var wire 5 A WBwriteReg [4:0] $end
$var wire 32 B WBreadData [31:0] $end
$var wire 1 C WBRegWrite $end
$var wire 1 D WBMemtoReg $end
$var wire 32 E WBALURes [31:0] $end
$var wire 1 F RegWrite $end
$var wire 1 G RegDst $end
$var wire 1 H MemtoReg $end
$var wire 1 I MemWrite $end
$var wire 1 J MemRead $end
$var wire 1 K MEMzero $end
$var wire 5 L MEMwriteReg [4:0] $end
$var wire 32 M MEMreadData2 [31:0] $end
$var wire 1 N MEMRegWrite $end
$var wire 1 O MEMMemtoReg $end
$var wire 1 P MEMMemWrite $end
$var wire 1 Q MEMMemRead $end
$var wire 32 R MEMEA [31:0] $end
$var wire 1 S MEMBranch $end
$var wire 32 T MEMALURes [31:0] $end
$var wire 1 U Jump $end
$var wire 1 V IFIDflush $end
$var wire 32 W IDpcNext [31:0] $end
$var wire 32 X IDinstr [31:0] $end
$var wire 1 Y IDRegWrite $end
$var wire 1 Z IDRegDst $end
$var wire 1 [ IDMemtoReg $end
$var wire 1 \ IDMemWrite $end
$var wire 1 ] IDMemRead $end
$var wire 1 ^ IDBranch $end
$var wire 1 _ IDALUSrc $end
$var wire 2 ` IDALUOp [1:0] $end
$var wire 5 a Exrd [4:0] $end
$var wire 32 b EXsignextendout [31:0] $end
$var wire 5 c EXrt [4:0] $end
$var wire 32 d EXreadData2 [31:0] $end
$var wire 32 e EXreadData1 [31:0] $end
$var wire 32 f EXpcNext [31:0] $end
$var wire 1 g EXRegWrite $end
$var wire 1 h EXRegDst $end
$var wire 1 i EXMemtoReg $end
$var wire 1 j EXMemWrite $end
$var wire 1 k EXMemRead $end
$var wire 1 l EXBranch $end
$var wire 1 m EXALUSrc $end
$var wire 2 n EXALUOp [1:0] $end
$var wire 32 o EA [31:0] $end
$var wire 1 p Branch $end
$var wire 1 q BEQFlag $end
$var wire 1 r ALUSrc $end
$var wire 32 s ALURes [31:0] $end
$var wire 2 t ALUOp [1:0] $end
$var wire 4 u ALUControlRes [3:0] $end
$scope module alu $end
$var wire 32 v op1 [31:0] $end
$var wire 32 w op2 [31:0] $end
$var wire 4 x ALUControl [3:0] $end
$var reg 32 y ALURes [31:0] $end
$var reg 1 . zero $end
$upscope $end
$scope module alucontrol $end
$var wire 6 z funct [5:0] $end
$var wire 2 { ALUOp [1:0] $end
$var reg 4 | ALUControlRes [3:0] $end
$upscope $end
$scope module controlunit $end
$var wire 6 } opcode [5:0] $end
$var wire 1 " reset $end
$var reg 2 ~ ALUOp [1:0] $end
$var reg 1 r ALUSrc $end
$var reg 1 q BEQFlag $end
$var reg 1 p Branch $end
$var reg 1 U Jump $end
$var reg 1 J MemRead $end
$var reg 1 I MemWrite $end
$var reg 1 H MemtoReg $end
$var reg 1 G RegDst $end
$var reg 1 F RegWrite $end
$upscope $end
$scope module datamem $end
$var wire 1 ! clk $end
$var wire 32 !" writeData [31:0] $end
$var wire 1 P memWrite $end
$var wire 1 Q memRead $end
$var wire 32 "" address [31:0] $end
$var reg 32 #" readData [31:0] $end
$scope begin $ivl_for_loop1 $end
$var integer 32 $" i [31:0] $end
$upscope $end
$upscope $end
$scope module exmemreg $end
$var wire 32 %" ALURes [31:0] $end
$var wire 32 &" EA [31:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 1 . zero $end
$var wire 5 '" writeReg [4:0] $end
$var wire 32 (" EXreadData2 [31:0] $end
$var wire 1 g EXRegWrite $end
$var wire 1 i EXMemtoReg $end
$var wire 1 j EXMemWrite $end
$var wire 1 k EXMemRead $end
$var wire 1 l EXBranch $end
$var reg 32 )" MEMALURes [31:0] $end
$var reg 1 S MEMBranch $end
$var reg 32 *" MEMEA [31:0] $end
$var reg 1 Q MEMMemRead $end
$var reg 1 P MEMMemWrite $end
$var reg 1 O MEMMemtoReg $end
$var reg 1 N MEMRegWrite $end
$var reg 32 +" MEMreadData2 [31:0] $end
$var reg 5 ," MEMwriteReg [4:0] $end
$var reg 1 K MEMzero $end
$upscope $end
$scope module flushunit $end
$var wire 2 -" ALUOp [1:0] $end
$var wire 1 r ALUSrc $end
$var wire 1 p Branch $end
$var wire 1 J MemRead $end
$var wire 1 I MemWrite $end
$var wire 1 H MemtoReg $end
$var wire 1 G RegDst $end
$var wire 1 F RegWrite $end
$var wire 1 ' flush $end
$var reg 2 ." IDALUOp [1:0] $end
$var reg 1 _ IDALUSrc $end
$var reg 1 ^ IDBranch $end
$var reg 1 ] IDMemRead $end
$var reg 1 \ IDMemWrite $end
$var reg 1 [ IDMemtoReg $end
$var reg 1 Z IDRegDst $end
$var reg 1 Y IDRegWrite $end
$upscope $end
$scope module idexreg $end
$var wire 2 /" ALUOp [1:0] $end
$var wire 1 _ ALUSrc $end
$var wire 1 ^ Branch $end
$var wire 1 ] MemRead $end
$var wire 1 \ MemWrite $end
$var wire 1 [ MemtoReg $end
$var wire 1 Z RegDst $end
$var wire 1 Y RegWrite $end
$var wire 1 ! clk $end
$var wire 5 0" rd [4:0] $end
$var wire 1 " reset $end
$var wire 5 1" rt [4:0] $end
$var wire 32 2" signextendout [31:0] $end
$var wire 32 3" readData2 [31:0] $end
$var wire 32 4" readData1 [31:0] $end
$var wire 32 5" IDpcNext [31:0] $end
$var reg 2 6" EXALUOp [1:0] $end
$var reg 1 m EXALUSrc $end
$var reg 1 l EXBranch $end
$var reg 1 k EXMemRead $end
$var reg 1 j EXMemWrite $end
$var reg 1 i EXMemtoReg $end
$var reg 1 h EXRegDst $end
$var reg 1 g EXRegWrite $end
$var reg 32 7" EXpcNext [31:0] $end
$var reg 32 8" EXreadData1 [31:0] $end
$var reg 32 9" EXreadData2 [31:0] $end
$var reg 5 :" EXrt [4:0] $end
$var reg 32 ;" EXsignextendout [31:0] $end
$var reg 5 <" Exrd [4:0] $end
$upscope $end
$scope module ifidreg $end
$var wire 1 $ IFIDwriteEn $end
$var wire 1 % IFflush $end
$var wire 1 ! clk $end
$var wire 32 =" pcNext [31:0] $end
$var wire 1 " reset $end
$var wire 32 >" instr [31:0] $end
$var reg 32 ?" IDinstr [31:0] $end
$var reg 32 @" IDpcNext [31:0] $end
$var reg 1 V IFIDflush $end
$upscope $end
$scope module instrmem $end
$var wire 32 A" instr [31:0] $end
$var wire 32 B" pc [31:0] $end
$upscope $end
$scope module memwbreg $end
$var wire 32 C" MEMALURes [31:0] $end
$var wire 1 O MEMMemtoReg $end
$var wire 1 N MEMRegWrite $end
$var wire 32 D" MEMreadData [31:0] $end
$var wire 5 E" MEMwriteReg [4:0] $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 F" WBALURes [31:0] $end
$var reg 1 D WBMemtoReg $end
$var reg 1 C WBRegWrite $end
$var reg 32 G" WBreadData [31:0] $end
$var reg 5 H" WBwriteReg [4:0] $end
$upscope $end
$scope module mux32ex $end
$var wire 32 I" i0 [31:0] $end
$var wire 32 J" i1 [31:0] $end
$var wire 1 m select $end
$var reg 32 K" out [31:0] $end
$upscope $end
$scope module mux32if $end
$var wire 32 L" i0 [31:0] $end
$var wire 32 M" i1 [31:0] $end
$var wire 1 & select $end
$var reg 32 N" out [31:0] $end
$upscope $end
$scope module mux32wb $end
$var wire 32 O" i0 [31:0] $end
$var wire 32 P" i1 [31:0] $end
$var wire 1 D select $end
$var reg 32 Q" out [31:0] $end
$upscope $end
$scope module mux5 $end
$var wire 5 R" i0 [4:0] $end
$var wire 5 S" i1 [4:0] $end
$var wire 1 h select $end
$var reg 5 T" out [4:0] $end
$upscope $end
$scope module pcreg $end
$var wire 1 ! clk $end
$var wire 32 U" pc_inp [31:0] $end
$var wire 1 , pcwriteEn $end
$var wire 1 " reset $end
$var reg 32 V" pc [31:0] $end
$upscope $end
$scope module regfile $end
$var wire 1 ! clk $end
$var wire 5 W" readReg1 [4:0] $end
$var wire 5 X" readReg2 [4:0] $end
$var wire 1 C regWrite $end
$var wire 1 " reset $end
$var wire 32 Y" writeData [31:0] $end
$var wire 5 Z" writeReg [4:0] $end
$var reg 32 [" readData1 [31:0] $end
$var reg 32 \" readData2 [31:0] $end
$scope begin $ivl_for_loop0 $end
$var integer 32 ]" i [31:0] $end
$upscope $end
$upscope $end
$scope module signextend $end
$var wire 16 ^" inp [15:0] $end
$var wire 32 _" out [31:0] $end
$upscope $end
$scope module stallcontrolunit1 $end
$var wire 5 `" EXrt [4:0] $end
$var wire 1 Q MEMMemRead $end
$var wire 1 " reset $end
$var wire 5 a" rs [4:0] $end
$var wire 5 b" rt [4:0] $end
$var reg 1 2 stall $end
$upscope $end
$scope module stallcontrolunit2 $end
$var wire 1 g EXRegWrite $end
$var wire 1 N MEMRegwrite $end
$var wire 5 c" MEMwriteReg [4:0] $end
$var wire 1 C WBRegWrite $end
$var wire 5 d" WBwriteReg [4:0] $end
$var wire 1 " reset $end
$var wire 5 e" rs [4:0] $end
$var wire 5 f" rt [4:0] $end
$var wire 5 g" writeReg [4:0] $end
$var reg 1 1 stall $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
b0 g"
b0 f"
b0 e"
b0 d"
b0 c"
b0 b"
b0 a"
b0 `"
b0 _"
b0 ^"
b100000 ]"
b0 \"
b0 ["
b0 Z"
b0 Y"
b0 X"
b0 W"
b0 V"
b100 U"
b0 T"
b0 S"
b0 R"
b0 Q"
b0 P"
b0 O"
b100 N"
b0 M"
b100 L"
b0 K"
b0 J"
b0 I"
b0 H"
b0 G"
b0 F"
b0 E"
bx D"
b0 C"
b0 B"
b100000000000010000000000000100 A"
b0 @"
b0 ?"
b100000000000010000000000000100 >"
b100 ="
b0 <"
b0 ;"
b0 :"
b0 9"
b0 8"
b0 7"
b0 6"
b0 5"
b0 4"
b0 3"
b0 2"
b0 1"
b0 0"
b0 /"
b0 ."
b0 -"
b0 ,"
b0 +"
b0 *"
b0 )"
b0 ("
b0 '"
b0 &"
b0 %"
b10000000000 $"
bx #"
b0 ""
b0 !"
b0 ~
b0 }
b10 |
b0 {
b0 z
b0 y
b10 x
b0 w
b0 v
b10 u
b0 t
b0 s
0r
0q
0p
b0 o
b0 n
0m
0l
0k
0j
0i
0h
0g
b0 f
b0 e
b0 d
b0 c
b0 b
b0 a
b0 `
0_
0^
0]
0\
0[
0Z
0Y
b0 X
b0 W
0V
0U
b0 T
0S
b0 R
0Q
0P
0O
0N
b0 M
b0 L
0K
0J
0I
0H
0G
0F
b0 E
0D
0C
b0 B
b0 A
b0 @
b100000000000010000000000000100 ?
b0 >
b0 =
b0 <
b100 ;
b100 :
b0 9
bx 8
b0 7
b0 6
b0 5
b0 4
b0 3
12
11
b0 0
b0 /
1.
1-
0,
b0 +
0*
0)
b0 (
1'
0&
0%
0$
0#
1"
0!
$end
#10
1K
bx B
bx G"
bx P"
b100000 ]"
1!
#20
0!
#30
b100000 ]"
1!
#40
0!
#50
b100000 ]"
1!
#60
0!
#70
b100000 ]"
1!
#80
0!
#90
b100000 ]"
1!
#100
0!
#110
b1 `
b1 ."
b1 /"
1Y
1Z
1,
1$
0'
0-
02
01
1F
1G
b10 t
b10 {
b10 ~
b10 -"
1!
0"
#120
0!
#130
b0 `
b0 ."
b0 /"
1_
0Z
b1000 :
b1000 N"
b1000 U"
0G
1r
b0 t
b0 {
b0 ~
b0 -"
b100000000000100000000000000101 ?
b100000000000100000000000000101 >"
b100000000000100000000000000101 A"
b100 3
b100 2"
b100 _"
b100 @
b100 ^"
b0x00 (
b0x00 z
b1 4
b1 1"
b1 X"
b1 b"
b1 f"
b1000 =
b1000 }
b1000 ;
b1000 ="
b1000 L"
b100 <
b100 B"
b100 V"
b100 W
b100 5"
b100 @"
b100000000000010000000000000100 X
b100000000000010000000000000100 ?"
b1 n
b1 6"
1g
1h
1!
#140
0!
#150
0.
b100 s
b100 y
b100 %"
b100 >
b100 w
b100 K"
b1 /
b1 '"
b1 T"
b1 g"
b1100 :
b1100 N"
b1100 U"
b101 3
b101 2"
b101 _"
b101 @
b101 ^"
b10x (
b10x z
b10 4
b10 1"
b10 X"
b10 b"
b10 f"
b1000100001100000100000 ?
b1000100001100000100000 >"
b1000100001100000100000 A"
1N
b0 n
b0 6"
b1 c
b1 :"
b1 R"
b1 `"
b100 b
b100 ;"
b100 J"
b10100 o
b10100 &"
b100 f
b100 7"
1m
0h
b1000 W
b1000 5"
b1000 @"
b100000000000100000000000000101 X
b100000000000100000000000000101 ?"
b1100 ;
b1100 ="
b1100 L"
b1000 <
b1000 B"
b1000 V"
1!
#160
0!
#170
0,
0$
1-
b101 s
b101 y
b101 %"
b1 `
b1 ."
b1 /"
0_
1Z
11
b10 /
b10 '"
b10 T"
b10 g"
b101 >
b101 w
b101 K"
b10000 :
b10000 N"
b10000 U"
1G
0r
b10 t
b10 {
b10 ~
b10 -"
bx ?
bx >"
bx A"
b1100000100000 3
b1100000100000 2"
b1100000100000 _"
b1100000100000 @
b1100000100000 ^"
b11 9
b11 0"
b1 5
b1 W"
b1 a"
b1 e"
b0 =
b0 }
bx00x0x (
bx00x0x z
b10000 ;
b10000 ="
b10000 L"
b1100 <
b1100 B"
b1100 V"
b1100 W
b1100 5"
b1100 @"
b1000100001100000100000 X
b1000100001100000100000 ?"
b10 c
b10 :"
b10 R"
b10 `"
b101 b
b101 ;"
b101 J"
b11100 o
b11100 &"
b1000 f
b1000 7"
b1 L
b1 ,"
b1 E"
b1 c"
b100 T
b100 ""
b100 )"
b100 C"
b10100 R
b10100 *"
b10100 M"
0K
1C
1!
#180
0!
#190
1.
b0 s
b0 y
b0 %"
b100 0
b100 Q"
b100 Y"
b0 >
b0 w
b0 K"
b11 /
b11 '"
b11 T"
b11 g"
b100000 (
b100000 z
b1 A
b1 H"
b1 Z"
b1 d"
b100 E
b100 F"
b100 O"
b10 L
b10 ,"
b10 E"
b10 c"
b101 T
b101 ""
b101 )"
b101 C"
b11100 R
b11100 *"
b11100 M"
b1 n
b1 6"
b11 a
b11 <"
b11 S"
b1100000100000 b
b1100000100000 ;"
b1100000100000 J"
b110000010001100 o
b110000010001100 &"
b1100 f
b1100 7"
0m
1h
1!
#200
0!
#210
b101 0
b101 Q"
b101 Y"
b11 L
b11 ,"
b11 E"
b11 c"
b0 T
b0 ""
b0 )"
b0 C"
b110000010001100 R
b110000010001100 *"
b110000010001100 M"
1K
b10 A
b10 H"
b10 Z"
b10 d"
b101 E
b101 F"
b101 O"
b100 7
b100 4"
b100 ["
1!
#220
0!
#230
1,
1$
0-
01
b0 0
b0 Q"
b0 Y"
0.
b100 s
b100 y
b100 %"
b11 A
b11 H"
b11 Z"
b11 d"
b0 E
b0 F"
b0 O"
b100 +
b100 v
b100 e
b100 8"
b101 6
b101 3"
b101 \"
1!
#240
0!
#250
b1001 s
b1001 y
b1001 %"
b10100 :
b10100 N"
b10100 U"
b101 >
b101 w
b101 K"
bx 6
bx 3"
bx \"
bx 7
bx 4"
bx ["
bx 3
bx 2"
bx _"
bx @
bx ^"
bx (
bx z
bx 9
bx 0"
bx 4
bx 1"
bx X"
bx b"
bx f"
bx 5
bx W"
bx a"
bx e"
bx =
bx }
b10100 ;
b10100 ="
b10100 L"
b10000 <
b10000 B"
b10000 V"
b10000 W
b10000 5"
b10000 @"
bx X
bx ?"
b101 d
b101 ("
b101 9"
b101 I"
b100 T
b100 ""
b100 )"
b100 C"
0K
1!
#260
0!
#270
b100 0
b100 Q"
b100 Y"
bx /
bx '"
bx T"
bx g"
bx >
bx w
bx K"
b11000 :
b11000 N"
b11000 U"
bx s
bx y
bx %"
b100 E
b100 F"
b100 O"
b1001 T
b1001 ""
b1001 )"
b1001 C"
b101 M
b101 !"
b101 +"
bx a
bx <"
bx S"
bx c
bx :"
bx R"
bx `"
bx b
bx ;"
bx J"
bx d
bx ("
bx 9"
bx I"
bx +
bx v
bx e
bx 8"
bx o
bx &"
b10000 f
b10000 7"
b10100 W
b10100 5"
b10100 @"
b11000 ;
b11000 ="
b11000 L"
b10100 <
b10100 B"
b10100 V"
1!
#280
0!
#290
b11100 :
b11100 N"
b11100 U"
b1001 0
b1001 Q"
b1001 Y"
b11100 ;
b11100 ="
b11100 L"
b11000 <
b11000 B"
b11000 V"
b11000 W
b11000 5"
b11000 @"
b10100 f
b10100 7"
bx L
bx ,"
bx E"
bx c"
bx T
bx ""
bx )"
bx C"
bx M
bx !"
bx +"
bx R
bx *"
bx M"
b1001 E
b1001 F"
b1001 O"
1!
#300
0!
#310
bx 0
bx Q"
bx Y"
b100000 :
b100000 N"
b100000 U"
bx A
bx H"
bx Z"
bx d"
bx E
bx F"
bx O"
b11000 f
b11000 7"
b11100 W
b11100 5"
b11100 @"
b100000 ;
b100000 ="
b100000 L"
b11100 <
b11100 B"
b11100 V"
1!
#320
0!
#330
b100100 :
b100100 N"
b100100 U"
b100100 ;
b100100 ="
b100100 L"
b100000 <
b100000 B"
b100000 V"
b100000 W
b100000 5"
b100000 @"
b11100 f
b11100 7"
1!
#340
0!
#350
b101000 :
b101000 N"
b101000 U"
b100000 f
b100000 7"
b100100 W
b100100 5"
b100100 @"
b101000 ;
b101000 ="
b101000 L"
b100100 <
b100100 B"
b100100 V"
1!
#360
0!
#370
b101100 :
b101100 N"
b101100 U"
b101100 ;
b101100 ="
b101100 L"
b101000 <
b101000 B"
b101000 V"
b101000 W
b101000 5"
b101000 @"
b100100 f
b100100 7"
1!
#380
0!
#390
b110000 :
b110000 N"
b110000 U"
b101000 f
b101000 7"
b101100 W
b101100 5"
b101100 @"
b110000 ;
b110000 ="
b110000 L"
b101100 <
b101100 B"
b101100 V"
1!
#400
0!
#410
b110100 :
b110100 N"
b110100 U"
b110100 ;
b110100 ="
b110100 L"
b110000 <
b110000 B"
b110000 V"
b110000 W
b110000 5"
b110000 @"
b101100 f
b101100 7"
1!
#420
0!
#430
b111000 :
b111000 N"
b111000 U"
b110000 f
b110000 7"
b110100 W
b110100 5"
b110100 @"
b111000 ;
b111000 ="
b111000 L"
b110100 <
b110100 B"
b110100 V"
1!
#440
0!
#450
b111100 :
b111100 N"
b111100 U"
b111100 ;
b111100 ="
b111100 L"
b111000 <
b111000 B"
b111000 V"
b111000 W
b111000 5"
b111000 @"
b110100 f
b110100 7"
1!
#460
0!
#470
b1000000 :
b1000000 N"
b1000000 U"
b111000 f
b111000 7"
b111100 W
b111100 5"
b111100 @"
b1000000 ;
b1000000 ="
b1000000 L"
b111100 <
b111100 B"
b111100 V"
1!
#480
0!
#490
b1000100 :
b1000100 N"
b1000100 U"
b1000100 ;
b1000100 ="
b1000100 L"
b1000000 <
b1000000 B"
b1000000 V"
b1000000 W
b1000000 5"
b1000000 @"
b111100 f
b111100 7"
1!
#500
0!
#510
b1001000 :
b1001000 N"
b1001000 U"
b1000000 f
b1000000 7"
b1000100 W
b1000100 5"
b1000100 @"
b1001000 ;
b1001000 ="
b1001000 L"
b1000100 <
b1000100 B"
b1000100 V"
1!
#520
0!
#530
b1001100 :
b1001100 N"
b1001100 U"
b1001100 ;
b1001100 ="
b1001100 L"
b1001000 <
b1001000 B"
b1001000 V"
b1001000 W
b1001000 5"
b1001000 @"
b1000100 f
b1000100 7"
1!
#540
0!
#550
b1010000 :
b1010000 N"
b1010000 U"
b1001000 f
b1001000 7"
b1001100 W
b1001100 5"
b1001100 @"
b1010000 ;
b1010000 ="
b1010000 L"
b1001100 <
b1001100 B"
b1001100 V"
1!
#560
0!
#570
b1010100 :
b1010100 N"
b1010100 U"
b1010100 ;
b1010100 ="
b1010100 L"
b1010000 <
b1010000 B"
b1010000 V"
b1010000 W
b1010000 5"
b1010000 @"
b1001100 f
b1001100 7"
1!
#580
0!
#590
b1011000 :
b1011000 N"
b1011000 U"
b1010000 f
b1010000 7"
b1010100 W
b1010100 5"
b1010100 @"
b1011000 ;
b1011000 ="
b1011000 L"
b1010100 <
b1010100 B"
b1010100 V"
1!
#600
0!
#610
b1011100 :
b1011100 N"
b1011100 U"
b1011100 ;
b1011100 ="
b1011100 L"
b1011000 <
b1011000 B"
b1011000 V"
b1011000 W
b1011000 5"
b1011000 @"
b1010100 f
b1010100 7"
1!
